/*!***************************************************************************************
\file       Vector2.cpp
\author     Cody Cannell
\date       6/19/18
\copyright  All content © 2018-2019 DigiPen (USA) Corporation, all rights reserved.
\par        Project: Boomerang
\brief      This is the definition of the Vector3 class.
*****************************************************************************************/

//========Self Include==================================================================//
#include "Vector2.hpp"
#include "Vector3.hpp"
#include "Vector4.hpp"
//========1st Party Includes============================================================//
//========3rd Party Includes============================================================//
#include <glm/glm.hpp>
#include <sstream>
#include <functional>
//========Types=========================================================================//
//========Defines=======================================================================//
//========Static Deceleration===========================================================//
template<typename BinOp>
static vector2 concat(vector2 const& lhs, vector2 const& rhs, BinOp op) noexcept
{
	return vector2{
		op(lhs.x, rhs.x),
		op(lhs.y, rhs.y)
	};
}

template<typename BinOp>
static vector2 concat(vector2 const& lhs, const float rhs, BinOp op) noexcept
{
	return vector2{
		op(lhs.x, rhs),
		op(lhs.y, rhs)
	};
}
///////========================================================================///////
///////   Public                                                               ///////
///////========================================================================///////

//==============================================================================//
//        Constructor                                                           //
//==============================================================================//

vector2::vector2(const float p_x, const float p_y) : x(p_x), y(p_y)
{ }

vector2::vector2(const vector4& toTruncate)
	:x{toTruncate.x} , y{toTruncate.y}
{

}

vector2::vector2(const vector3& toTruncate)
	: x{ toTruncate.x }, y{ toTruncate.y }
{
}

//vector2::vector2(const glm::vec2 & p_other) : x(p_other.x), y(p_other.y)
//{ }

//==============================================================================//
//        Destructor                                                            //
//==============================================================================//

//==============================================================================//
//        Operators                                                             //
//==============================================================================//

float& vector2::operator[](unsigned p_index)
{
	return toFloatPtr()[p_index];
}

float const& vector2::operator[](unsigned p_index) const
{
	return toFloatPtr()[p_index];
}

using vectorN = vector2;
// common vector operations
#include "Vector.inl"

//==============================================================================//
//        Getters & Setters                                                     //
//==============================================================================//

/////========================================================================/////
/////     Functions                                                          /////
/////========================================================================/////

vector2 vector2::abs() const
{
	return { std::abs(x), std::abs(y) };
}

float vector2::dotP(const vector2& p_rhs) const
{
	return x * p_rhs.x + y * p_rhs.y;
}

std::string vector2::toStringPtr() const
{
	std::stringstream l_ss;
	l_ss << "(" << x << ", " << y << ")";
	return l_ss.str();
}

///////========================================================================///////
///////   Private                                                              ///////
///////========================================================================///////

//////======================================================================//////
//////    Non-Static                                                        //////
//////======================================================================//////

/////========================================================================/////
/////     Functions                                                          /////
/////========================================================================/////
const vector2 vector2::UnitX = vector2(1.0f, 0.0f);
const vector2 vector2::UnitY = vector2(0.0f, 1.0f);
////==========================================================================////
////      Non-Virtual                                                         ////
////==========================================================================////

//==============================================================================//
//        Helper                                                                //
//==============================================================================//
